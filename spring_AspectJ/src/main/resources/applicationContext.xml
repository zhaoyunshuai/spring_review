<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="cn.zs.springaop"/>
    <!--配置aop-->
    <aop:config>
        <!--切入点，拦截哪些bean的方法-->
        <!--切面：要对哪些方法进行怎么样的增强
            aop：aspect aspectj 的方式
            ref：配置通知
            -->
        <aop:aspect ref="myAspect">
            <!--通知关联切入点:就是将通知和切入点进行绑定
           method：advice类中的方法
           pointcut-ref：注入切入点。
           -->
            <aop:pointcut id="123" expression="execution(* cn.zs.springaop.service.LoginService.login())"/>
            <!--前置通知-->
            <aop:before method="before" pointcut-ref="123"/>
            <!--如果最终通知中需要进行参数的返回，需要在此配置return属性-->
            <aop:after-returning method="afterReturning" pointcut="execution(* cn.zs.springaop.service.LoginService.afterReturningTest(..))" returning="returnValue"/>
            <!--环绕通知-->
            <aop:around method="around" pointcut="execution(* cn.zs.springaop.service.LoginService.aroundTest(..))"/>
            <!--需要配置目标方法抛出的异常 throwing属性-->
            <aop:after-throwing method="afterThrowing" pointcut="execution(public void cn.zs.springaop.service.LoginService.afterThrowingTest())" throwing="e"/>
            <!--最终通知-->
            <aop:after method="after" pointcut="execution(* cn.zs.springaop.service.LoginService.afterTest())"/>
            <!--此处是用来验证，同一个方法afterThrowingTest 如果被最终通知进行了增强，无论是否发生异常，都是会被执行的-->
            <aop:after method="after" pointcut="execution(* cn.zs.springaop.service.LoginService.afterThrowingTest())"/>
        </aop:aspect>


    </aop:config>
</beans>