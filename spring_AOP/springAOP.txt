AOP:面向切面编程，是一种编程思想
    采用的是横向抽取的机制。采用的是代理的思想，对目标对象，创建代理对象，在不修改原代码的情况下，通过代理对象，调用增强
    功能的代码，从而对原有业务进行增强。

    应用场景：
        1.记录日志
        2.监控方法运行时间（性能监控）
        3.权限控制
        4.缓存优化
        5.事务管理
    AOP相关术语
        Aspect：切面。通知和切入点的结合，通知和切入点共同定义了切面的全部内容---他的功能，在何时何地完成其功能
        joinpoint:连接点，所谓的连接点，就是那些被拦截到的点，在Spring中指的是方法，因为Spring只支持方法类型的连接点
        PointCut：切入点，切入点其实就是要实际进行增强的连接点
            通知定义了“功能”，“何时”，切入点定义了“何地”，其实就是要对那个方法进行增强。
        Advice：通知，拦截到joinpoint之后要做的事，就是通知。
        Target：目标对象，代理的目标对象
        weaving：织入，指把切面应用到目标对象来创建新的代理对象的过程，切点是在指定的切入点织入到目标对象
        introduction：引介，在不修改类代码的前提下，引介可以在运行期动态的为类添加一下方法或者属性。

    AOP：底层实现为动态代理
    JDK动态代理：必须有接口（默认，因为推荐面向接口编程）
    CGLIB动态代理：可以没有接口。
        CGLIB是一个开源项目，是一个强大的高性能的高质量的Code生成类库。可以在运行时期扩展java类和实现java接口。
        该代理需要相应的jar包，但是不需要导包，因为在spring core 包中包含了cglib，而且同时包含了cglib所依赖的asm包
    代理总结：
       spring在运行时期生成类的代理对象，不需要任何的编译器
       spring有两种代理方式一种是基于接口的JDK代理，一种是基于类的CGLIB代理，
       基于接口的代理优先于基于类的代理，默认的就是jdk的代理方式。
       标记final的方式是不能被通知的，spring是为目标对象生成子类，任何被通知的方法都需要被重写，将通知织入，final方法不允许被重写
       spring只支持方法作为连接点。不提供属性连接点。

    传统SpringAOP通知类型
        前置通知，后置通知，环绕通知，异常通知，引介通知（在目标类中添加一下新的方法和属性。）
        必须实现对应的接口。
        切入点表达式：
            bean（id/name）：增强spring中定义的id为**或者name为**的bean中的所有的方法
            execution表达式：其实和方法的定义差不多
                方法权限修饰符号 返回值类型 全限定类名.类名.方法名 （参数列表（主要是参数类型，无需参数参数名。））
                public void cn.zs.spring.service.HelloService.sayHello（java.lang.String，java.lang.String）
                表示公共的无返回值的HelloService类中的sayHello方法，参数为两个String类型的参数。
                （modifiers-pattern? （非必填项）--<访问修饰符>?
                ret-type-pattern （必填项）--<返回类型>
                declaring-type-pattern? （非必填项）
                name-pattern（param-pattern）（必填项）--<方法名>(<参数>)
                throws-pattern?（非必填项）<异常>?）
                一共五个参数
                ？表示非必输项。
                除了返回类型模式，参数模式和方法模式，其他的都是可选的。
                返回类型模式一般用*代替，表示任意的返回值类型
                常用表达式：
                    1：execution(* cn.itcast.procject.service..*.*(..))
                      * 返回类型任意，cn.itcast.procject.service包及其子包中所有类，类中所有方法，参数任意
                    2：execution(* *..*.*(..))
                      * 返回类型任意，任意包中及其子包中所有类，类中所有方法，参数任意
                    3：execution(* *(..))
                      * 返回类型任意，任意包中及其子包中所有类，类中所有方法，参数任意
    AspectJ提供的通知类型
        前置before，后置afterReturning，环绕Around，抛出AfterThrowing（相当于异常通知），
        引介DeclareParents，最终after（不管是否有异常，都会执行此通知。）

