spring：是分层的，javaEE/JavaSE一站式开源的轻量级框架。
    分层一站式：表现层，业务层，持久层
        表现层：springMVC
        业务层：Ioc、AOP、事务控制...
        持久层：整合mybatis
    轻量级：取代了EJB的臃肿、低效、复杂、脱离现实的情况，没有侵入，
spring核心模块：
    核心容器（core container）：包括Core、Beans、Context和EL
        1.Core和Beans提供了spring的基础功能，提供IOC和依赖注入的特性。基础概念为BeanFactory，提供Factory模式的经典实现来消除
        对程序性单例模式的需要，并真正的允许你从程序逻辑中分离依赖关系和配置。
        2.Context模块基于Core和Beans来建立的。他提供了一种框架风格的方式来访问的对象，有些像JNDI注册表。Context封装包继承了beans包的功能，还增加了国际化（I18N）,事件传播，资源装载，以及透明创建上下文，例如通过servlet容器，以及对大量JavaEE特性的支持，如EJB、JMX。核心接口是ApplicationContext。
        3：Expression Language，表达式语言模块，提供了在运行期间查询和操作对象图的强大能力。支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从Spring 容器获取Bean，它也支持列表投影、选择和一般的列表聚合等。
    数据访问/集成部分(Data Access/Integration)
        1：JDBC模块，提供对JDBC的抽象，它可消除冗长的JDBC编码和解析数据库厂商特有的错误代码。
        2：ORM模块，提供了常用的"对象/关系"映射APIs的集成层。 其中包括JPA、JDO、Hibernate 和 iBatis 。利用ORM封装包，可以混合使用所有Spring提供的特性进行"对象/关系"映射，如简单声明事务管理 。
        3：OXM模块，提供一个支持Object和XML进行映射的抽象层，其中包括JAXB、Castor、XMLBeans、JiBX和XStream。
        4：JMS模块，提供一套"消息生产者、消费者"模板用于更加简单的使用JMS，JMS用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。
        5：Transaction模块，支持程序通过简单声明性 事务管理，只要是Spring管理对象都能得到Spring管理事务的好处，即使是POJO，也可以为他们提供事务。
    Web
        1：Web模块，提供了基础的web功能。例如多文件上传、集成IoC容器、远程过程访问、以及Web Service支持，并提供一个RestTemplate类来提供方便的Restful services访问
        2：Web-Servlet模块，提供了Web应用的Model-View-Controller（MVC）实现。Spring MVC框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的JSP标签，完全无缝与Spring其他技术协作。
        3：Web-Portlet模块，提供了在Portlet环境下的MVC实现
    AOP
        1：AOP模块，提供了符合AOP 联盟规范的面向方面的编程实现，让你可以定义如方法拦截器和切入点，从逻辑上讲，可以减弱代码的功能耦合，清晰的被分离开。而且，利用源码级的元数据功能，还可以将各种行为信息合并到你的代码中 。
        2：Aspects模块，提供了对AspectJ的集成。
        3：Instrumentation模块， 提供一些类级的工具支持和ClassLoader级的实现，可以在一些特定的应用服务器中使用。
    Test
        1：Test模块，提供对使用JUnit和TestNG来测试Spring组件的支持，它提供一致的ApplicationContexts并缓存这些上下文，它还能提供一些mock对象，使得你可以独立的测试代
spring的优势：
    （1）方便解耦，简化开发
    Spring就是一个大工厂，它可以将所有对象创建和依赖关系维护，交给Spring管理
    （2）AOP编程的支持
    Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能
    （3）声明式事务的支持
    只需要通过配置就可以完成对事务的管理，而无需手动编程
    （3）方便程序的测试
    Spring对Junit4支持，可以通过注解方便的测试Spring程序
    （5）方便集成各种优秀框架
    Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持
    （6）降低JavaEE API的使用难度
    Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低
IOC的地层实现：工厂+反射+XML配置文件。
DI:依赖注入，在Sping框架创建Bean时，动态的将依赖对象注入的Bean组件。

Spring工厂：
    顶层接口：BeanFactory采用的式延迟加载，只有在第一次getBean的时候才会去初始化bean
            new XmlBeanFactory（new FileSystemResource（"配置文件的绝对路径"））
    子接口：ApplicationContext是对BeanFactory的扩展，功能更加强大
            国际化处理
            时间传递
            Bean自动封装
            各种不同应用层的Contest实现。
    获取Bean有两种方式
        1.根据spring工厂（配置文件中）中bean的id/name进行获取
        2.根据bean的类型或bean接口对应的类型。（User.class/IUser.class）
    spring工厂把bean加载到工厂中的四种方式
        1.调用类的默认无参构造方法
        2.静态工厂，创建工厂类，对外提供静态方法，获取bean，xml中要配置工厂类和静态方法为工厂方法
        3.工厂，代码上和静态工厂基本无差别，就是少了个静态。xml中需要分别配置工厂类和bean，而且在bean中要通过factiry-bean指定
         工厂类的bean，用factory-method指定工厂类中的工厂方法
        4.继承FactoryBean；只需要配置继承了FactoryBean的bean就好了，当需要加载bean的时候，会先判断此工厂类有没有实现FactoryB二胺】
        方法，如果实现了直接就调用getObject() 方法进行获取bean，需要注意的是，此方法获取bean，无法通过Bean的类型进行获取。
    Spring中的bean的作用域：在配置bean的时候可以通过scope进行配置。
        单例Singleton：全局只有一个对象。默认为单例模式
        多例prototype：每次获取bean都是一个全新的bean，相当于每次都是new bean
        session：同一个HTTPSession共享一个Bean不同的Session使用不同的Bean，仅适用于WebApplicationContext环境。
        request：每次HTTP请求都会创建一个Bean，该作用域只适用于WebApplicationContext环境
        globalSession：（这个基本不用了解，没怎么用过，都没讲过。）
    Bean的属性注入：对一个对象的属性进行赋值，就叫做属性注入。
        1.通过构造方法进行依赖注入<bean id ="" class=""><construct-arg index=""/name=""/type=""  value=""/ref=""/></bean>
        2.通过setter方法进行注入<bean id="" class=""> <property name="" value=""><property age="" ref=""></bean>
        3.p名称空间注入 <bean id="" class="" p:name="" p:id="" p:age-ref=""/>
        4.spEL方式进行注入。
    Spring配置bean基于注解
        @Component @Service @Controller @Repository
        属性注入@Value（"Rose"）:简单数据类型，四类八种String等
        @Value("#{userDao}")：复杂数据类型，主要是对象。
        @Autowired：按照类型进行注入，对应bean中的class
        @Qualifier("userDao")：和上一个注解进行配合使用，表示按照名称进行注入，对应bean中的id属性。
        @Resource：首先是按照名称进行注入，找不到就按照类型进行注入。如果都找不到抛异常
        @Resource(name="")直接是按照名称进行注入，如果找不到，直接报错
    Bean的初始化和销毁：注解方式 @PostConstruct  @PreDestroy
    Bean的作用域，单独的一个注解：@Scope("")